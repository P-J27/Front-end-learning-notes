#### 概述

正则表达式（regular expression）是用于匹配字符串中字符组合的模式，在JavaScript中，`正则表达式也是对象`

1. 正则表达式通常用来做检索，替换那些符合某个模式（规则）的文本，例如昵称输入框里的对中文的**匹配**；
2. 此外，正则表达式还常用于过滤掉页面一些敏感（**替换**），或者从字符串获取我们想要的特定部分（**提取**）等

特点：

1. 灵活性、逻辑性、功能性非常强
2. 可以迅速用极简的形式达到对字符串复杂的控制
3. 对刚接触的人来说，比较晦涩难懂

4. 一般实际开发，都是直接复制写好的正则表达式，但是要求会使用正则表达式且根据实际情况修改正则表达式

#### 应用

1.通过调用RegExp对象的构造函数创建 `var 变量名 = new RegExp(/表达式/)`

2.通过字面量创建 `var 变量名 = /表达式/`（正则表达式不需要加引号，不管是数字型还是字符串型）

测试正则表达式是否符合语法规范：

test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回true或false，

其参数是测试字符串 `regexObj.test(str)` （**只要包含有str这个字符串，返回的都是true**）

```js
var rg = /123/;
console.log(rg.test(123));   //true
console.log(rg.test(12123));   //true
```

#### 特殊字符

一个正则表达式可以由简单的字符构成，比如/abc/， 也可以是简单和特殊字符串的组合，比如/ab*c/。其中特殊字符也被称为元字符，在正则表达式中具有特殊意义的专用符号，如^ 、$ 、+ 等

（匹配特殊字符前面增加 `\`就可以了）

正则表达式速查表：https://www.runoob.com/regexp/regexp-metachar.html

边界符：`^` 表示匹配行首的文本（以谁开始） `$` 表示匹配行尾的文本（以谁结束）

```js
var rg = /^abc/;
console.log(rg.test('abcd'));  //true
console.log(rg.test('babc'));  //false
//必须是abc,类似全等
var rg2 = /^abc$/;
console.log(rg.test('abcd'));  //false
console.log(rg.test('abcabc'));  //false
```

字符类：`[]`表示有一系列字符可供选择，只要匹配到其中一个就可以了

```js
var rg = /[abc]/;    //只要包含有a或者b或者c就返回true
console.log(rg.test('andy'));  //返回true
//var rg = /^[abc]$/ 是三选一，只有是单个a或者b或者c才返回true
```
[]`使用范围符号 `-

```js
var rg = /^[a-z]$/;   //26个英文小写字母任何一个字母都返回true
var rg1 = /^[a-zA-Z]$/;  //26个英文字母任何一个字母都返回true
var rg2 = /^[a-z0-9_-]$/; //任何单个26小写字母，0-9数字，_, -,都返回true
```

`[]`里使用^：如果中括号里有`^`表示**取反**的意思，千万别和边界符`^`混淆，要区分开来

```js
var rg = /^[^a-z]$/;  //26个英文小写字母任何一个字母都返回false
```

量词符：用来设定某个模式出现的次数，有`*`、 `+`、 `？`、 `{}`，**`{}`的量词间不要有空格**，可以用test来检测下方正则表达式

```js
var rg = /^a*$/;  //a可以出现0-n次，n>=0 
var rg1 = /^a+$/; //a可以出现1-n次，n>=1
var rg2 = /^a?$/; //a可以出现1或0次 
var rg3 = /^a{3}$/; //a只能可以出现3次
var rg4 = /^a{3,}$/; //a只可以出现3-n次 n>=3 
var rg5 = /^a{3,16}$/; //a只可以出现3-16次
//普遍的用户名规定：
var name = /^[a-zA-Z0-9_-]{6, 16}$/
```

括号总结

`[]`中括号：字符集合，匹配方括号中的任意字符

`{}` 大括号：量词符，里面表示重复次数，但只让大括号前面一个字符重复 （注意：`/^abc{3}$/`，只让c重复三次，即abccc）

`()` 小括号：表示优先级 可以用来：`/^(abc){3}$/`，表示让abc重复三次，即abcabc

#### 预定义类
```js
`\d` 匹配到0-9任意一数字，相当于`[0-9]` (`var rg = /\d/;`)
`\D` 匹配到0-9以外的数字，相当于`[^0-9]
`\w` 匹配任意字母、数字、下划线，相当于`[A-Za-z0-9_]
`\W`匹配除字母数字下划线以外的字符，相当于`[^A-Za-z0-9_]
`\s` 匹配空格（包括换行符、制表符、空格符等），相当于`[\t\r\n\v\f]
`\S`匹配非空格字符，相当于`[^\t\r\n\v\f]
```

正则里的或者符号：`|` (`var rg = /^\d{3}-\d{8}|\d{4}-\d{7}$/;`)

#### 正则替换

replace()方法可以实现替换字符串的操作，用来替换的参数可以是一个字符串或者是一个字符表达式 `stringObject.replace(regexp/substr, replacement)`

```js
var str = 'red and blue and red';
var newstr = str.replace('red', 'yellow');   //结果为yellow and blue and red  
//var newstr = str.replace(/red/, 'yellow'); 同理
```

但是replace只能替换掉第一个匹配的字符/正则表达式，无法满足替换掉多个敏感词

可以使用: `/表达式/[switch]` swtich也成为修饰符，即按照什么样的模式来匹配

g: 全局匹配

i: 忽略大小写

gi: 全局匹配+忽略大小写

```js
var str = 'red and blue and red';
var newstr = str.replace(/red/g, 'yellow'); //结果为yellow and blue and yellow
```